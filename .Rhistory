sightingsTrain <- Train_VisOnly.set[Train_VisOnly.set$Density>0,c('lat','long','date')]
sightingsTest <- Test_VisOnly.set[Test_VisOnly.set$Density>0,c('lat','long','date')]
pal <-colorFactor(palette = "RdYlGn",
domain = c(2003,2004,2009,2012,2014))
map1 <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(data = sightingsTrain, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Training Set',radius = 7)%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Test Set',radius = 7)%>%
addLegend(pal = pal,values = c(2003,2004,2009,2012,2014),title = 'Year')
map1
#Get test visual sightings}
sightingsTrain <- Train_VisOnly.set[Train_VisOnly.set$Density>0,c('lat','long','date')]
sightingsTest <- Test_VisOnly.set[Test_VisOnly.set$Density>0,c('lat','long','date')]
pal <-colorFactor(palette = "RdYlGn",
domain = c(2003,2004,2009,2012,2014))
map1 <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(data = sightingsTrain, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Training Set',radius = 7)%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.5, group = 'Test Set',radius = 7)%>%
addLegend(pal = pal,values = c(2003,2004,2009,2012,2014),title = 'Year')
map1
#Get test visual sightings}
sightingsTrain <- Train_VisOnly.set[Train_VisOnly.set$Density>0,c('lat','long','date')]
sightingsTest <- Test_VisOnly.set[Test_VisOnly.set$Density>0,c('lat','long','date')]
pal <-colorFactor(palette = "RdYlGn",
domain = c(2003,2004,2009,2012,2014))
map1 <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(data = sightingsTrain, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Training Set')%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Test Set',radius = 7)%>%
addLegend(pal = pal,values = c(2003,2004,2009,2012,2014),title = 'Year')
map1
HARPsites <- unique(Train_AcOnly.set['lat','long'])
Train_AcOnly.set['lat','long']
Train_AcOnly.set#['lat','long']
Train_AcOnly.set$['lat','long']
Train_AcOnly.set[c('lat','long')]
HARPsites <- unique(Train_AcOnly.set[c('lat','long')])
#Get test visual sightings}
sightingsTrain <- Train_VisOnly.set[Train_VisOnly.set$Density>0,c('lat','long','date')]
sightingsTest <- Test_VisOnly.set[Test_VisOnly.set$Density>0,c('lat','long','date')]
HARPsites <- unique(Train_AcOnly.set[c('lat','long')])
pal <-colorFactor(palette = "RdYlGn",
domain = c(2003,2004,2009,2012,2014))
map1 <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(data = sightingsTrain, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Training Set',radius = 7)%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Test Set',radius = 7)%>%
addMarkers(data = HARPsites, lng = ~ long, lat = ~ lat) %>%
addLegend(pal = pal,values = c(2003,2004,2009,2012,2014),title = 'Year')
map1
pal <- colorNumeric(palette = matlab.like2(5),
domain=c(0,1),
na.color = 'transparent')
map <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addRasterImage(jan2009_AcOnly_prediction_crop, colors = pal,
opacity = 0.8, group = 'Acoustic Jan. 2009') %>%
addRasterImage(july2009_AcOnly_prediction_crop, colors = pal,
opacity = 0.8, group = 'Acoustic July 2009') %>%
addRasterImage(jan2009_VisOnly_prediction_crop, colors = pal,
opacity = 0.8, group = 'Visual Jan. 2009') %>%
addRasterImage(july2009_VisOnly_prediction_crop,
colors = pal, opacity = 0.8, group = 'Visual July 2009') %>%
addRasterImage(jan2009_prediction_crop, colors = pal,
opacity = 0.8, group = 'Both Jan. 2009') %>%
addRasterImage(july2009_prediction_crop, colors = pal,
opacity = 0.8, group = 'Both July 2009') %>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = "black",
stroke = FALSE, fillOpacity = 0.5, group = 'Test Sightings (summer)') %>%
addLegend(pal = pal, values = c(0,1),
title = 'Probability of encounter') %>%
addLayersControl(
baseGroups = c('Acoustic Jan. 2009', 'Acoustic July 2009',
'Visual Jan. 2009', 'Visual July 2009',
'Both Jan. 2009','Both July 2009'),
overlayGroups = 'Sightings: Summer 2009',
options = layersControlOptions(collapsed = FALSE)
)
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/plot_timeseries.R')
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/AcoustoVisualDE_v2.R')
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/AcoustoVisualDE_v2.R')
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/setup_info_Gg.R')
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/setup_info_Gg.R')
percFilled <- plot.missingdata(mergedSegments,covarList,paste0('AcousticAndVisual_',SP))
percFilled <- plot.missingdata(AcOnlySegments,covarList,paste0('AcousticOnly_',SP))
percFilled <- plot.missingdata(VisOnlySegments,covarList,paste0('VisualOnly_',SP))
install.packages("devtools")
library("devtools")
install.packages("roxygen2")
library(roxygen2)
getwd()
setwd("E:/NASData/AcoustoVisualDE/AcoustoVisualDE/")
create("AcoustoVisualDE)
create("AcoustoVisualDE")
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/AcoustoVisualDE_v2.R')
create("HabitatProject")
getwd(_
getwd()
setwd("./HabitatProject/")
document
document()
setwd("..")
install("HabitatProject")
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/AcoustoVisualDE_v2.R')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(mgcv)
library(MASS)
library(rgdal)
library(raster)
library(ggplot2)
library(rgeos)
library(mapview)
library(leaflet)
library(broom)
library(plotrix)
library(magrittr)
library(colorRamps)
library(lubridate)
library(HabitatProject)
options(stringsAsFactors = FALSE)
# load some preferences
load('E:/NASData/ModelData/Gg/setup_info_Gg.Rdata')
load('E:/NASData/ModelData/Gg/GgMergedData.Rdata')
outDir <- file.path('E:/NASData/ModelData',SP,'/')
covarList<-names(mergedSegments[c(2,5:length(mergedSegments))])
percFilled <- plot.missingdata(mergedSegments,covarList,paste0('AcousticAndVisual_',SP))
percFilled <- plot.missingdata(AcOnlySegments,covarList,paste0('AcousticOnly_',SP))
percFilled <- plot.missingdata(VisOnlySegments,covarList,paste0('VisualOnly_',SP))
install("HabitatProject")
setwd("E:/NASData/AcoustoVisualDE/AcoustoVisualDE/"
)
install("HabitatProject")
library(HabitatProject)
library(HabitatProject)
ls()
setwd("E:/NASData/AcoustoVisualDE/AcoustoVisualDE"
)
install("HabitatProject")
library(HabitatProject)
library("HabitatProject")
?HabitatProject
expression
as.Date
findInterval
density
plot
quantile
document()
getwd()
setwd("E:/NASData/AcoustoVisualDE/AcoustoVisualDE/HabitatProject/")
document()
setwd("E:/NASData/AcoustoVisualDE/AcoustoVisualDE/")
install("HabitatProject")
install("HabitatProject")
knitr::opts_chunk$set(echo = TRUE)
library(mgcv)
library(MASS)
library(rgdal)
library(raster)
library(ggplot2)
library(rgeos)
library(mapview)
library(leaflet)
library(broom)
library(plotrix)
library(magrittr)
library(colorRamps)
library(lubridate)
library(HabitatProject)
options(stringsAsFactors = FALSE)
# load some preferences
load('E:/NASData/ModelData/Gg/setup_info_Gg.Rdata')
load('E:/NASData/ModelData/Gg/GgMergedData.Rdata')
outDir <- file.path('E:/NASData/ModelData',SP,'/')
covarList<-names(mergedSegments[c(2,5:length(mergedSegments))])
percFilled <- plot.missingdata(mergedSegments,covarList,paste0('AcousticAndVisual_',SP))
percFilled <- plot.missingdata(AcOnlySegments,covarList,paste0('AcousticOnly_',SP))
percFilled <- plot.missingdata(VisOnlySegments,covarList,paste0('VisualOnly_',SP))
# If you decide from the missing data plots that you want to restrict years going forward:
yearListIdx = as.numeric(format(mergedSegments$date,"%Y"))
yearListIdx_AcOnly = as.numeric(format(AcOnlySegments$date,"%Y"))
yearListIdx_VisOnly = as.numeric(format(VisOnlySegments$date,"%Y"))
keepDates.train <- which(yearListIdx != 2009 & yearListIdx >= 2003 & yearListIdx <= 2012)
keepDates.test <- which(yearListIdx == 2009 | yearListIdx == 2013)
keepDates_AcOnly.train <- which(yearListIdx_AcOnly != 2009 & yearListIdx_AcOnly >= 2003 & yearListIdx_AcOnly <= 2012)
keepDates_AcOnly.test <- which(yearListIdx_AcOnly == 2009 | yearListIdx_AcOnly == 2013)
keepDatesVisOnly.train <- which(yearListIdx_VisOnly != 2009 & yearListIdx_VisOnly >= 2003 & yearListIdx_VisOnly <= 2012)
keepDatesVisOnly.test <- which(yearListIdx_VisOnly == 2009 | yearListIdx_VisOnly == 2013)
mergedTrain.set<- mergedSegments[keepDates.train,]
Train_AcOnly.set <- AcOnlySegments[keepDates_AcOnly.train,]
Train_VisOnly.set<- VisOnlySegments[keepDatesVisOnly.train,]
mergedTest.set<- mergedSegments[keepDates.test,]
Test_AcOnly.set<- AcOnlySegments[keepDates_AcOnly.test,]
Test_VisOnly.set<- VisOnlySegments[keepDatesVisOnly.test,]
#Get test visual sightings
sightingsTrain <- Train_VisOnly.set[Train_VisOnly.set$Density>0,c('lat','long','date')]
sightingsTest <- Test_VisOnly.set[Test_VisOnly.set$Density>0,c('lat','long','date')]
HARPsites <- unique(Train_AcOnly.set[c('lat','long')])
pal <-colorFactor(palette = "RdYlGn",
domain = c(2003,2004,2009,2012,2014))
map1 <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(data = sightingsTrain, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Training Set',radius = 7)%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Test Set',radius = 7)%>%
addMarkers(data = HARPsites, lng = ~ long, lat = ~ lat) %>%
addLegend(pal = pal,values = c(2003,2004,2009,2012,2014),title = 'Year')
map1
plot.timeseries(siteList,outDir,AcOnlySegments)
# Identify and clear problematic outliers
outlierList <-which(mergedSegments$CHL< -10)
mergedSegments$CHL[outlierList] <- NaN
outlierList <-which(mergedSegments$FrontDist_Cayula>800000)
mergedSegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(mergedSegments$Density>10000)
mergedSegments$Density[outlierList] <- NaN
outlierList <-which(AcOnlySegments$CHL< -10)
AcOnlySegments$CHL[outlierList] <- NaN
outlierList <-which(AcOnlySegments$FrontDist_Cayula>800000)
AcOnlySegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(AcOnlySegments$Density>10000)
AcOnlySegments$Density[outlierList] <- NaN
outlierList <-which(VisOnlySegments$CHL<  -10)
VisOnlySegments$CHL[outlierList] <- NaN
outlierList <-which(VisOnlySegments$FrontDist_Cayula>800000)
VisOnlySegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(VisOnlySegments$Density>10000)
VisOnlySegments$Density[outlierList] <- NaN
plot.cleveland(mergedTrain.set,covarList,FALSE,paste0('AcousticAndVisual_',SP))
plot.cleveland(Train_AcOnly.set,covarList,FALSE,paste0('AcousticOnly_',SP))
plot.cleveland(Train_VisOnly.set,covarList,FALSE,paste0('VisualOnly_',SP))
covarList2 <- c("SST","SSH","CHL","HYCOM_MLD",
"HYCOM_SALIN_0","HYCOM_DIR_0",
"HYCOM_MAG_0",
"HYCOM_UPVEL_50","FrontDist_Cayula",
"EddyDist","Neg_EddyDist","DayOfYear",
"fac1")
transformList <- c("none","none","log10","log10",
"none","none",
"log10",
"none","log10","none",
"none","none",
"none")
# restrict covariates again to limited set
mergedTrain.set2<- mergedTrain.set[,covarList2]
mergedTest.set2<- mergedTest.set[,covarList2]
Train_AcOnly.set2<- Train_AcOnly.set[,covarList2]
Test_AcOnly.set2<- Test_AcOnly.set[,covarList2]
Train_VisOnly.set2<- Train_VisOnly.set[,covarList2]
Test_VisOnly.set2<- Test_VisOnly.set[,covarList2]
transformedCovars.train <- transform.covars(mergedTrain.set2,
covarList2,transformList)
?HabitatProject
library(HabitatProject)
?HabitatProject
?HabitatProject
library(HabitatProject)
?HabitatProject
??HabitatProject
setwd()
getwd()
install("HabitatProject")
library("devtools")
library(roxygen2)
install("HabitatProject")
?HabitatProject
install("HabitatProject")
install("HabitatProject")
?HabitatProject
getwd()
setwd('./HabitatProject/')
document()
document()
document()
setwd('..')
install("HabitatProject")
setwd('./HabitatProject/')
document()
document()
setwd('..')
install("HabitatProject")
install("HabitatProject")
setwd('./HabitatProject/')
document()
setwd('..')
install("HabitatProject")
install("HabitatProject")
setwd('./HabitatProject/')
document()
setwd('..')
install("HabitatProject")
knitr::opts_chunk$set(echo = TRUE)
covarList<-names(mergedSegments[c(2,5:length(mergedSegments))])
knitr::opts_chunk$set(echo = TRUE)
library(mgcv)
library(MASS)
library(rgdal)
library(raster)
library(ggplot2)
library(rgeos)
library(mapview)
library(leaflet)
library(broom)
library(plotrix)
library(magrittr)
library(colorRamps)
library(lubridate)
library(HabitatProject)
options(stringsAsFactors = FALSE)
# load some preferences
load('E:/NASData/ModelData/Gg/setup_info_Gg.Rdata')
load('E:/NASData/ModelData/Gg/GgMergedData.Rdata')
outDir <- file.path('E:/NASData/ModelData',SP,'/')
covarList<-names(mergedSegments[c(2,5:length(mergedSegments))])
percFilled <- plot.missingdata(mergedSegments,covarList,paste0('AcousticAndVisual_',SP))
setwd('./HabitatProject/')
document()
document()
setwd('..')
install("HabitatProject")
covarList<-names(mergedSegments[c(2,5:length(mergedSegments))])
percFilled <- plot.missingdata(mergedSegments,covarList,paste0('AcousticAndVisual_',SP))
percFilled <- plot.missingdata(AcOnlySegments,covarList,paste0('AcousticOnly_',SP))
percFilled <- plot.missingdata(VisOnlySegments,covarList,paste0('VisualOnly_',SP))
# If you decide from the missing data plots that you want to restrict years going forward:
yearListIdx = as.numeric(format(mergedSegments$date,"%Y"))
yearListIdx_AcOnly = as.numeric(format(AcOnlySegments$date,"%Y"))
yearListIdx_VisOnly = as.numeric(format(VisOnlySegments$date,"%Y"))
keepDates.train <- which(yearListIdx != 2009 & yearListIdx >= 2003 & yearListIdx <= 2012)
keepDates.test <- which(yearListIdx == 2009 | yearListIdx == 2013)
keepDates_AcOnly.train <- which(yearListIdx_AcOnly != 2009 & yearListIdx_AcOnly >= 2003 & yearListIdx_AcOnly <= 2012)
keepDates_AcOnly.test <- which(yearListIdx_AcOnly == 2009 | yearListIdx_AcOnly == 2013)
keepDatesVisOnly.train <- which(yearListIdx_VisOnly != 2009 & yearListIdx_VisOnly >= 2003 & yearListIdx_VisOnly <= 2012)
keepDatesVisOnly.test <- which(yearListIdx_VisOnly == 2009 | yearListIdx_VisOnly == 2013)
mergedTrain.set<- mergedSegments[keepDates.train,]
Train_AcOnly.set <- AcOnlySegments[keepDates_AcOnly.train,]
Train_VisOnly.set<- VisOnlySegments[keepDatesVisOnly.train,]
mergedTest.set<- mergedSegments[keepDates.test,]
Test_AcOnly.set<- AcOnlySegments[keepDates_AcOnly.test,]
Test_VisOnly.set<- VisOnlySegments[keepDatesVisOnly.test,]
#Get test visual sightings
sightingsTrain <- Train_VisOnly.set[Train_VisOnly.set$Density>0,c('lat','long','date')]
sightingsTest <- Test_VisOnly.set[Test_VisOnly.set$Density>0,c('lat','long','date')]
HARPsites <- unique(Train_AcOnly.set[c('lat','long')])
pal <-colorFactor(palette = "RdYlGn",
domain = c(2003,2004,2009,2012,2014))
map1 <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(data = sightingsTrain, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Training Set',radius = 7)%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Test Set',radius = 7)%>%
addMarkers(data = HARPsites, lng = ~ long, lat = ~ lat) %>%
addLegend(pal = pal,values = c(2003,2004,2009,2012,2014),title = 'Year')
map1
plot.timeseries(siteList,outDir,AcOnlySegments)
# Identify and clear problematic outliers
outlierList <-which(mergedSegments$CHL< -10)
mergedSegments$CHL[outlierList] <- NaN
outlierList <-which(mergedSegments$FrontDist_Cayula>800000)
mergedSegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(mergedSegments$Density>10000)
mergedSegments$Density[outlierList] <- NaN
outlierList <-which(AcOnlySegments$CHL< -10)
AcOnlySegments$CHL[outlierList] <- NaN
outlierList <-which(AcOnlySegments$FrontDist_Cayula>800000)
AcOnlySegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(AcOnlySegments$Density>10000)
AcOnlySegments$Density[outlierList] <- NaN
outlierList <-which(VisOnlySegments$CHL<  -10)
VisOnlySegments$CHL[outlierList] <- NaN
outlierList <-which(VisOnlySegments$FrontDist_Cayula>800000)
VisOnlySegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(VisOnlySegments$Density>10000)
VisOnlySegments$Density[outlierList] <- NaN
plot.cleveland(mergedTrain.set,covarList,FALSE,paste0('AcousticAndVisual_',SP))
plot.cleveland(Train_AcOnly.set,covarList,FALSE,paste0('AcousticOnly_',SP))
plot.cleveland(Train_VisOnly.set,covarList,FALSE,paste0('VisualOnly_',SP))
setwd('./HabitatProject/')
document()
setwd('..')
install("HabitatProject")
knitr::opts_chunk$set(echo = TRUE)
library(mgcv)
library(MASS)
library(rgdal)
library(raster)
library(ggplot2)
library(rgeos)
library(mapview)
library(leaflet)
library(broom)
library(plotrix)
library(magrittr)
library(colorRamps)
library(lubridate)
library(HabitatProject)
options(stringsAsFactors = FALSE)
# load some preferences
load('E:/NASData/ModelData/Gg/setup_info_Gg.Rdata')
load('E:/NASData/ModelData/Gg/GgMergedData.Rdata')
outDir <- file.path('E:/NASData/ModelData',SP,'/')
covarList<-names(mergedSegments[c(2,5:length(mergedSegments))])
percFilled <- plot.missingdata(mergedSegments,covarList,paste0('AcousticAndVisual_',SP))
percFilled <- plot.missingdata(AcOnlySegments,covarList,paste0('AcousticOnly_',SP))
percFilled <- plot.missingdata(VisOnlySegments,covarList,paste0('VisualOnly_',SP))
# If you decide from the missing data plots that you want to restrict years going forward:
yearListIdx = as.numeric(format(mergedSegments$date,"%Y"))
yearListIdx_AcOnly = as.numeric(format(AcOnlySegments$date,"%Y"))
yearListIdx_VisOnly = as.numeric(format(VisOnlySegments$date,"%Y"))
keepDates.train <- which(yearListIdx != 2009 & yearListIdx >= 2003 & yearListIdx <= 2012)
keepDates.test <- which(yearListIdx == 2009 | yearListIdx == 2013)
keepDates_AcOnly.train <- which(yearListIdx_AcOnly != 2009 & yearListIdx_AcOnly >= 2003 & yearListIdx_AcOnly <= 2012)
keepDates_AcOnly.test <- which(yearListIdx_AcOnly == 2009 | yearListIdx_AcOnly == 2013)
keepDatesVisOnly.train <- which(yearListIdx_VisOnly != 2009 & yearListIdx_VisOnly >= 2003 & yearListIdx_VisOnly <= 2012)
keepDatesVisOnly.test <- which(yearListIdx_VisOnly == 2009 | yearListIdx_VisOnly == 2013)
mergedTrain.set<- mergedSegments[keepDates.train,]
Train_AcOnly.set <- AcOnlySegments[keepDates_AcOnly.train,]
Train_VisOnly.set<- VisOnlySegments[keepDatesVisOnly.train,]
mergedTest.set<- mergedSegments[keepDates.test,]
Test_AcOnly.set<- AcOnlySegments[keepDates_AcOnly.test,]
Test_VisOnly.set<- VisOnlySegments[keepDatesVisOnly.test,]
#Get test visual sightings
sightingsTrain <- Train_VisOnly.set[Train_VisOnly.set$Density>0,c('lat','long','date')]
sightingsTest <- Test_VisOnly.set[Test_VisOnly.set$Density>0,c('lat','long','date')]
HARPsites <- unique(Train_AcOnly.set[c('lat','long')])
pal <-colorFactor(palette = "RdYlGn",
domain = c(2003,2004,2009,2012,2014))
map1 <- leaflet() %>%  setView(lng = -89.4, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(data = sightingsTrain, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Training Set',radius = 7)%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,color = ~pal(year(date)),
stroke = TRUE, fillOpacity = 0.8, group = 'Test Set',radius = 7)%>%
addMarkers(data = HARPsites, lng = ~ long, lat = ~ lat) %>%
addLegend(pal = pal,values = c(2003,2004,2009,2012,2014),title = 'Year')
map1
plot.timeseries(siteList,outDir,AcOnlySegments)
# Identify and clear problematic outliers
outlierList <-which(mergedSegments$CHL< -10)
mergedSegments$CHL[outlierList] <- NaN
outlierList <-which(mergedSegments$FrontDist_Cayula>800000)
mergedSegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(mergedSegments$Density>10000)
mergedSegments$Density[outlierList] <- NaN
outlierList <-which(AcOnlySegments$CHL< -10)
AcOnlySegments$CHL[outlierList] <- NaN
outlierList <-which(AcOnlySegments$FrontDist_Cayula>800000)
AcOnlySegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(AcOnlySegments$Density>10000)
AcOnlySegments$Density[outlierList] <- NaN
outlierList <-which(VisOnlySegments$CHL<  -10)
VisOnlySegments$CHL[outlierList] <- NaN
outlierList <-which(VisOnlySegments$FrontDist_Cayula>800000)
VisOnlySegments$FrontDist_Cayula[outlierList] <- NaN
outlierList <-which(VisOnlySegments$Density>10000)
VisOnlySegments$Density[outlierList] <- NaN
covarList2 <- c("SST","SSH","CHL","HYCOM_MLD",
"HYCOM_SALIN_0","HYCOM_DIR_0",
"HYCOM_MAG_0",
"HYCOM_UPVEL_50","FrontDist_Cayula",
"EddyDist","Neg_EddyDist","DayOfYear",
"fac1")
transformList <- c("none","none","log10","log10",
"none","none",
"log10",
"none","log10","none",
"none","none",
"none")
# restrict covariates again to limited set
mergedTrain.set2<- mergedTrain.set[,covarList2]
mergedTest.set2<- mergedTest.set[,covarList2]
Train_AcOnly.set2<- Train_AcOnly.set[,covarList2]
Test_AcOnly.set2<- Test_AcOnly.set[,covarList2]
Train_VisOnly.set2<- Train_VisOnly.set[,covarList2]
Test_VisOnly.set2<- Test_VisOnly.set[,covarList2]
transformedCovars.train <- transform.covars(mergedTrain.set2,
covarList2,transformList)
setwd('./HabitatProject/')
document()
document()
setwd('..')
install("HabitatProject")
transform.covars()
library(HabitatProject)
transform.covars()
transform.covars
install.packages("devtools")
install.packages("devtools")
library("devtools")
library(roxygen2)
ls(HabitatProject)
ls(project:HabitatProject)
ls("project:HabitatProject")
ls("HabitatProject")
lsf.str("HabitatProject")
lsf.str("project:HabitatProject")
lsf.str("package:HabitatProject")
install("HabitatProject")
library(HabitatProject)
lsf.str("package:HabitatProject")
