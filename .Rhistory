}
}
}
maxEffectiveAreaJoint <- max(c(transformedCovars.train$EffectiveArea,
transformedCovars.test$EffectiveArea))
# do additional adjustment for effective area
joint_train_weightsG0 <- joint_train_weightsG0*
(transformedCovars.train$EffectiveArea/maxEffectiveAreaJoint)
for (iFac in 1:length(transformedCovars.test$fac1)) {
if (!is.na(transformedCovars.test$fac1[iFac]) & !is.na(transformedCovars.test$Density[iFac])){
if (transformedCovars.test$fac1[iFac]>5) {
if (transformedCovars.test$Density[iFac]==0){
# if it's visual data and it's a zero, adjust by g0 ie, only a X% chance it was a true zero.
joint_test_weightsG0[iFac,1] <- visG0*visDetProb
}
}
}
}
# do additional adjustment for effective area
joint_test_weightsG0 <- joint_test_weightsG0*
(transformedCovars.test$EffectiveArea/maxEffectiveAreaJoint)
VisOnly.train_weightsG0<- array(data = 1, dim = c(length(transformedCovars_VisOnly.train$fac1),1))
VisOnly.test_weightsG0<- array(data = 1, dim = c(length(transformedCovars_VisOnly.test$fac1),1))
for (iFac in 1:length(transformedCovars_VisOnly.train$fac1)) {
if (!is.na(transformedCovars_VisOnly.train$Density[iFac]) &
transformedCovars_VisOnly.train$Density[iFac]==0){
# if it's visual data and it's a zero, adjust by g0 ie, only a X% chance it was a true zero.
VisOnly.train_weightsG0[iFac,1] <- visG0*visDetProb
}
}
maxEffectiveAreaVis <- max(c(transformedCovars_VisOnly.train$EffectiveArea,
transformedCovars_VisOnly.test$EffectiveArea))
# do additional adjustment for effective area
VisOnly.train_weightsG0 <- VisOnly.train_weightsG0*
(transformedCovars_VisOnly.train$EffectiveArea/maxEffectiveAreaVis)
for (iFac in 1:length(transformedCovars_VisOnly.test$fac1)) {
if (!is.na(transformedCovars_VisOnly.test$Density[iFac]) &
transformedCovars_VisOnly.test$Density[iFac]==0){
# if it's visual data and it's a zero, adjust by g0 ie, only a X% chance it was a true zero.
VisOnly.test_weightsG0[iFac,1] <- visG0*visDetProb
}
}
# do additional adjustment for effective area
VisOnly.test_weightsG0 <- VisOnly.test_weightsG0*
(transformedCovars_VisOnly.test$EffectiveArea/maxEffectiveAreaVis)
# Remove NaNs
goodData_Ac <- which(!is.na(rowSums(transformedCovars_AcOnly.train)))
AcOnly.train.NoNa <- transformedCovars_AcOnly.train[goodData_Ac,]
goodData_Vis <- which(!is.na(rowSums(transformedCovars_VisOnly.train)))
VisOnly.train.NoNa <- transformedCovars_VisOnly.train[goodData_Vis,]
goodData_Joint <- which(!is.na(rowSums(transformedCovars.train)))
Joint.train.NoNa <- transformedCovars.train[goodData_Joint,]
goodData_Ac_test <- which(!is.na(rowSums(transformedCovars_AcOnly.test)))
AcOnly.test.NoNa <- transformedCovars_AcOnly.test[goodData_Ac_test,]
goodData_Vis_test <- which(!is.na(rowSums(transformedCovars_VisOnly.test)))
VisOnly.test.NoNa <- transformedCovars_VisOnly.test[goodData_Vis_test,]
goodData_Joint_test <- which(!is.na(rowSums(transformedCovars.test)))
Joint.test.NoNa <- transformedCovars.test[goodData_Joint_test,]
kVal = 5
gam_full_AcOnly<- NULL
gam_full_VisOnly<- NULL
gam_full_Joint<- NULL
# save ranges of each scaled covariate in training set (max and min)
JointRangesMax <- apply(transformedCovars.train, MARGIN = 2,
function(x) max(x, na.rm=TRUE))
JointRangesMin <- apply(transformedCovars.train, MARGIN = 2,
function(x) min(x, na.rm=TRUE))
AcOnlyRangesMax <- apply(transformedCovars_AcOnly.train, MARGIN = 2,
function(x) max(x, na.rm=TRUE))
AcOnlyRangesMin <- apply(transformedCovars_AcOnly.train, MARGIN = 2,
function(x) min(x, na.rm=TRUE))
VisOnlyRangesMax <- apply(transformedCovars_VisOnly.train, MARGIN = 2,
function(x) max(x, na.rm=TRUE))
VisOnlyRangesMin <- apply(transformedCovars_VisOnly.train, MARGIN = 2,
function(x) min(x, na.rm=TRUE))
varNames <- names(transformedCovars_AcOnly.train)
varNamesFormula <- varNames[2:10]
formulaAcOnly_allVars <-paste('s(', varNamesFormula, ", bs = 'ts', k = kVal)", sep = "", collapse = ' + ')
formulaAcOnly_allVars <- as.formula(paste('yAcOnly ~',formulaAcOnly_allVars))
gam_full_AcOnly <- gam(formulaAcOnly_allVars,
data = transformedCovars_AcOnly.train,
na.action = na.omit,family = tw())
formulaVisOnly_allVars <-paste('s(', varNamesFormula, ", bs = 'ts', k = kVal)", sep = "", collapse = ' + ')
formulaVisOnly_allVars <- as.formula(paste('yVisOnly ~',formulaVisOnly_allVars))
gam_full_VisOnly <- gam(formulaVisOnly_allVars,
data = transformedCovars_VisOnly.train,
na.action = na.omit,
family = Tweedie(p = 1.5, link = log),
weights = VisOnly.train_weightsG0)
formulaJoint_allVars <-paste('s(', varNamesFormula, ", bs = 'ts', k = kVal)", sep = "", collapse = ' + ')
formulaJoint_allVars <- as.formula(paste('y ~',formulaJoint_allVars))
gam_full_Joint <- gam(formulaJoint_allVars,
data = transformedCovars.train,
weights = joint_train_weightsG0,
na.action = na.omit,
family = Tweedie(p = 1.5, link = log))
# Save models if re-calculating everything
save(gam_full_AcOnly,file = paste(outDir,SP,'_AcOnly_tw_GAMs_Density.Rdata',sep=''))
save(gam_full_VisOnly,file = paste(outDir,SP,'_VisOnly_tw_GAMs_Density.Rdata',sep=''))
save(gam_full_Joint,file = paste(outDir,SP,'_Joint_tw_GAMs_Density.Rdata',sep=''))
# alternative if models are already calculated
load(paste(outDir,SP,'_AcOnly_tw_GAMs_Density.Rdata',sep=''))
load(paste(outDir,SP,'_VisOnly_tw_GAMs_Density.Rdata',sep=''))
load(paste(outDir,SP,'_Joint_tw_GAMs_Density.Rdata',sep=''))
AcOnlySummary <- summary(gam_full_AcOnly)
# AcOnlySummary
significantPvals_AcOnly <- which(AcOnlySummary$s.pv<=.05)
# rerun model with only significant predictors
formulaAcOnly_prunedVars <-paste('s(', varNamesFormula[significantPvals_AcOnly], ", bs = 'ts', k = kVal)", sep = "", collapse = ' + ')
formulaAcOnly_prunedVars <- as.formula(paste('yAcOnly ~',formulaAcOnly_prunedVars))
AcOnly_model <- gam(formulaAcOnly_prunedVars,
data = transformedCovars_AcOnly.train,
na.action = na.omit,family = tw())
summary(AcOnly_model)
nTerms <- size(AcOnly_model$smooth,2)
png(paste(outDir,SP,'_AcOnly_smooths.png',sep=''), res = 300, units = "in", width = 6.5, height = ceil(nTerms/3)*2)
par(mfrow = c(ceil(nTerms/3),3),mar = c(4,2,1,1))
for  (i in 1:nTerms) {
plot(AcOnly_model,select = i,
cex.lab = 1.3,cex.axis = 1.1,scale=0,xlab = varUnits[i], ylab = "")
}
dev.off()
smoothFig <-paste0(outDir,SP,'_AcOnly_smooths.png')
plot(residuals.gam(AcOnly_model))
# gam.check(AcOnly_gam_pruned_TF_best)
VisOnlySummary <- summary(gam_full_VisOnly)
# VisOnlySummary
significantPvals_VisOnly <- which(VisOnlySummary$s.pv<=.05)
# rerun model with only significant predictors
formulaVisOnly_prunedVars <-paste('s(', varNamesFormula[significantPvals_VisOnly], ", bs = 'ts', k = kVal)", sep = "", collapse = ' + ')
formulaVisOnly_prunedVars <- as.formula(paste('yVisOnly ~',formulaVisOnly_prunedVars))
VisOnly_model <- gam(formulaVisOnly_prunedVars,
data = transformedCovars_VisOnly.train,
family = Tweedie(p = 1.5, link = log),
weights = VisOnly.train_weightsG0)
summary(VisOnly_model)
nTerms <- size(VisOnly_model$smooth,2)
png(paste(outDir,SP,'_VisOnly_smooths.png',sep=''), res = 300, units = "in", width = 6.5, height = ceil(nTerms/3)*2)
par(mfrow = c(ceil(nTerms/3),3),mar = c(4,2,1,1))
for  (i in 1:nTerms) {
plot(VisOnly_model,select = i,
cex.lab = 1.3,cex.axis = 1.1,scale=0,xlab = varUnits[i], ylab = "")
}
dev.off()
smoothFig <-paste0(outDir,SP,'_VisOnly_smooths.png')
plot(residuals.gam(VisOnly_model))
# gam.check(VisOnly_gam_pruned_TF_best)
JointSummary <- summary(gam_full_Joint)
# JointSummary
significantPvals_Joint <- which(JointSummary$s.pv<=.05)
# rerun model with only significant predictors
formulaJoint_prunedVars <-paste('s(', varNamesFormula[significantPvals_Joint], ", bs = 'ts', k = kVal)", sep = "", collapse = ' + ')
formulaJoint_prunedVars <- as.formula(paste('y ~',formulaJoint_prunedVars))
Joint_model <- gam(formulaJoint_prunedVars,
data = transformedCovars.train,
weights = joint_train_weightsG0,
na.action = na.omit,
family = Tweedie(p = 1.5, link = log))
summary(Joint_model)
nTerms <- size(Joint_model$smooth,2)
png(paste(outDir,SP,'_Joint_smooths.png',sep=''), res = 300, units = "in", width = 6.5, height = ceil(nTerms/3)*2)
par(mfrow = c(ceil(nTerms/3),3),mar = c(4,2,1,1))
for  (i in 1:nTerms) {
plot(Joint_model,select = i,
cex.lab = 1.3,cex.axis = 1.1,scale=0,xlab = varUnits[i], ylab = "")
}
dev.off()
smoothFig <-paste0(outDir,SP,'_Joint_smooths.png')
plot(residuals.gam(Joint_model))
# gam.check(gam_pruned_TF_best)
pr <- NULL
pr$AcOnly_JointData <- predict.gam(AcOnly_model,
transformedCovars.test,
type = 'response',na.action = na.pass,se.fit=TRUE)
pr$VisOnly_JointData <- predict.gam(VisOnly_model,
transformedCovars.test,
type = 'response',na.action = na.pass,se.fit=TRUE)
pr$Joint_JointData <- predict.gam(Joint_model,
transformedCovars.test,
type = 'response',na.action = na.pass,se.fit=TRUE)
MSE <- NULL
MSE$AcOnly_test_JointData <- mean(
abs(as.vector(transformedCovars.test$y)-
pr$AcOnly_JointData$fit),na.rm = TRUE)
MSE$VisOnly_test_JointData <- mean(
abs(as.vector(transformedCovars.test$y)-
pr$VisOnly_JointData$fit),na.rm = TRUE)
MSE$Joint_test <- mean(
abs(as.vector(transformedCovars.test$y)-
pr$Joint_JointData$fit),na.rm = TRUE)
XEntropyTable<- rbind(MSE$AcOnly_test_JointData,MSE$VisOnly_test_JointData,
MSE$Joint_test)
colnames(XEntropyTable)<- 'Mean Absolute Error'
rownames(XEntropyTable)<- c("Acoustic - Test Joint Data",
"Visual - Test Joint Data",
"Joint - Test Joint Data")
print('Mean absolute error scores (lower is better)')
print(round(XEntropyTable, digits = 3))
# Predict on acoustic test data, using acoustic only model for comparison...
compAcSet_MC <- which((AcOnly.test.NoNa$fac2)==5)
compAcSet_GC <- which((AcOnly.test.NoNa$fac2)==10)
compAcSet_DT <- which((AcOnly.test.NoNa$fac2)==15 |
(AcOnly.test.NoNa$fac2)==16)
compAcSet_DC <- which((AcOnly.test.NoNa$fac2)==21 |
(AcOnly.test.NoNa$fac2)==22)
compAcSet_MP <- which((AcOnly.test.NoNa$fac2)==26)
# Predict in time
dateTicks = as.POSIXct(c('2013-01-01 GMT','2013-04-01 GMT',
'2013-07-01 GMT','2013-10-01 GMT',
'2014-01-01 GMT'))
dateLabels = c('Jan. 2013','Apr. 2013','Jul. 2013','Oct 2013','Jan. 2014')
predAcOnly_MC <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_MC,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_GC <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_GC,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_DT <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_DT,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_DC <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_DC,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_MP <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_MP,],
type = 'response',na.action = na.pass,se.fit=TRUE)
# occurIdx = which(as.POSIXct(pOccur[,1])>='2013-01-01' & as.POSIXct(pOccur[,1])<'2014-01-01')
AcOnly_predictionSet <- data.frame(unique(Test_AcOnly.set$date[goodData_Ac_test]))
AcOnlyGoodTimes <-  Test_AcOnly.set$date[goodData_Ac_test]
colnames(AcOnly_predictionSet) <-"date"
AcOnly_predictionSet$MC <- NA
AcOnly_predictionSet$predSd_MC <- NA
AcOnly_predictionSet$testObs_MC <-NA
AcOnly_predictionSet$testObs_MC_smooth <- NA
MC_times <- AcOnlyGoodTimes[compAcSet_MC]
m1 <- match(MC_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$MC[m1] <-predAcOnly_MC$fit
AcOnly_predictionSet$predSd_MC[m1] <- predAcOnly_MC$se.fit
AcOnly_predictionSet$testObs_MC[m1] <- Test_AcOnly.set$Density[compAcSet_MC]
AcOnly_predictionSet$testObs_MC_smooth <- rollmean(AcOnly_predictionSet$testObs_MC,k = 7,fill=NA)
AcOnly_predictionSet$GC <- NA
AcOnly_predictionSet$predSd_GC <- NA
AcOnly_predictionSet$testObs_GC <-NA
GC_times <- AcOnlyGoodTimes[compAcSet_GC]
m2 <- match(GC_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$GC[m2] <-predAcOnly_GC$fit
AcOnly_predictionSet$predSd_GC[m2] <- predAcOnly_GC$se.fit
AcOnly_predictionSet$testObs_GC[m2] <- Test_AcOnly.set$Density[compAcSet_GC]
AcOnly_predictionSet$testObs_GC_smooth <- rollmean(AcOnly_predictionSet$testObs_GC,k=7,fill=NA)
AcOnly_predictionSet$DT <- NA
AcOnly_predictionSet$predSd_DT <- NA
AcOnly_predictionSet$testObs_DT <-NA
DT_times <- AcOnlyGoodTimes[compAcSet_DT]
m3 <- match(DT_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$DT[m3] <- predAcOnly_DT$fit
AcOnly_predictionSet$predSd_DT[m3] <- predAcOnly_DT$se.fit
AcOnly_predictionSet$testObs_DT[m3] <- Test_AcOnly.set$Density[compAcSet_DT]
AcOnly_predictionSet$testObs_DT_smooth <- rollmean(AcOnly_predictionSet$testObs_DT,k=7,fill=NA)
AcOnly_predictionSet$DC <- NA
AcOnly_predictionSet$predSd_DC <- NA
AcOnly_predictionSet$testObs_DC <-NA
DC_times <- AcOnlyGoodTimes[compAcSet_DC]
m4 <- match(DC_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$DC[m4] <- predAcOnly_DC$fit
AcOnly_predictionSet$predSd_DC[m4] <- predAcOnly_DC$se.fit
AcOnly_predictionSet$testObs_DC[m4] <- Test_AcOnly.set$Density[compAcSet_DC]
AcOnly_predictionSet$testObs_DC_smooth <- rollmean(AcOnly_predictionSet$testObs_DC,k=7,fill=NA)
AcOnly_predictionSet$MP <- NA
AcOnly_predictionSet$predSd_MP <- NA
AcOnly_predictionSet$testObs_MP <-NA
MP_times <- AcOnlyGoodTimes[compAcSet_MP]
m5 <- match(MP_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$MP[m5] <- predAcOnly_MP$fit
AcOnly_predictionSet$predSd_MP[m5] <- predAcOnly_MP$se.fit
AcOnly_predictionSet$testObs_MP[m5] <- Test_AcOnly.set$Density[compAcSet_MP]
AcOnly_predictionSet$testObs_MP_smooth <- rollmean(AcOnly_predictionSet$testObs_MP,k=7,fill=NA)
AcOnly_predictionSet$Legend1 <- "Observations"
AcOnly_predictionSet$StDev <- "Std. Error"
AcOnly_predictionSet$Legend <- "Predictions"
# par(mfrow = c(5,1),oma=c(3,0,5,0)),colour="#000099",colour="#CC0000"
mcLabel <- grobTree(textGrob("MC", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
gcLabel <- grobTree(textGrob("GC", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
dtLabel <- grobTree(textGrob("DT", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
dcLabel <- grobTree(textGrob("DC", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
mpLabel <- grobTree(textGrob("MP", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
p1_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_MC + MC, ymin = pmax(MC - predSd_MC,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(MC - predSd_MC,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_MC_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y = MC, color = Legend))+
labs(y = "Density (/1000km^2)", x = "")+
scale_color_manual("",values= c("gray48","#009999"))+
theme_bw()+theme(legend.position = c(0.9, 0.8),legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))+
annotation_custom(mcLabel)#+ylim(c(0,.6))
p2_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_GC + GC, ymin = pmax(GC - predSd_GC,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(GC - predSd_GC,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_GC_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=GC, color = Legend))+
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(gcLabel)
p3_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_DT + DT, ymin = pmax(DT - predSd_DT,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(DT - predSd_DT,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_DT_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=DT, color = Legend)) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(dtLabel)
p4_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_DC + DC, ymin = pmax(DC - predSd_DC,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(DC - predSd_DC,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_DC_smooth, color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=DC, color = Legend)) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(dcLabel)
p5_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_MP + MP, ymin = pmax(MP - predSd_MP,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(MP - predSd_MP,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_MP_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=MP, color = Legend)) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "Date")+theme_bw()+
theme(legend.position="none")+annotation_custom(mpLabel)
multiplot(p1_Ac, p2_Ac, p3_Ac, p4_Ac, p5_Ac, cols=1)
# Predict on acoustic test data, using acoustic only model for comparison...
compAcSet_MC <- which((AcOnly.test.NoNa$fac2)==5)
compAcSet_GC <- which((AcOnly.test.NoNa$fac2)==10)
compAcSet_DT <- which((AcOnly.test.NoNa$fac2)==15 |
(AcOnly.test.NoNa$fac2)==16)
compAcSet_DC <- which((AcOnly.test.NoNa$fac2)==21 |
(AcOnly.test.NoNa$fac2)==22)
compAcSet_MP <- which((AcOnly.test.NoNa$fac2)==26)
# Predict in time
dateTicks = as.POSIXct(c('2013-01-01 GMT','2013-04-01 GMT',
'2013-07-01 GMT','2013-10-01 GMT',
'2014-01-01 GMT'))
dateLabels = c('Jan. 2013','Apr. 2013','Jul. 2013','Oct 2013','Jan. 2014')
predAcOnly_MC <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_MC,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_GC <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_GC,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_DT <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_DT,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_DC <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_DC,],
type = 'response',na.action = na.pass,se.fit=TRUE)
predAcOnly_MP <- predict.gam(AcOnly_model,
transformedCovars_AcOnly.test[compAcSet_MP,],
type = 'response',na.action = na.pass,se.fit=TRUE)
# occurIdx = which(as.POSIXct(pOccur[,1])>='2013-01-01' & as.POSIXct(pOccur[,1])<'2014-01-01')
AcOnly_predictionSet <- data.frame(unique(Test_AcOnly.set$date[goodData_Ac_test]))
AcOnlyGoodTimes <-  Test_AcOnly.set$date[goodData_Ac_test]
colnames(AcOnly_predictionSet) <-"date"
AcOnly_predictionSet$MC <- NA
AcOnly_predictionSet$predSd_MC <- NA
AcOnly_predictionSet$testObs_MC <-NA
AcOnly_predictionSet$testObs_MC_smooth <- NA
MC_times <- AcOnlyGoodTimes[compAcSet_MC]
m1 <- match(MC_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$MC[m1] <-predAcOnly_MC$fit
AcOnly_predictionSet$predSd_MC[m1] <- predAcOnly_MC$se.fit
AcOnly_predictionSet$testObs_MC[m1] <- Test_AcOnly.set$Density[compAcSet_MC]
AcOnly_predictionSet$testObs_MC_smooth <- rollmean(AcOnly_predictionSet$testObs_MC,k = 7,fill=NA)
AcOnly_predictionSet$GC <- NA
AcOnly_predictionSet$predSd_GC <- NA
AcOnly_predictionSet$testObs_GC <-NA
GC_times <- AcOnlyGoodTimes[compAcSet_GC]
m2 <- match(GC_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$GC[m2] <-predAcOnly_GC$fit
AcOnly_predictionSet$predSd_GC[m2] <- predAcOnly_GC$se.fit
AcOnly_predictionSet$testObs_GC[m2] <- Test_AcOnly.set$Density[compAcSet_GC]
AcOnly_predictionSet$testObs_GC_smooth <- rollmean(AcOnly_predictionSet$testObs_GC,k=7,fill=NA)
AcOnly_predictionSet$DT <- NA
AcOnly_predictionSet$predSd_DT <- NA
AcOnly_predictionSet$testObs_DT <-NA
DT_times <- AcOnlyGoodTimes[compAcSet_DT]
m3 <- match(DT_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$DT[m3] <- predAcOnly_DT$fit
AcOnly_predictionSet$predSd_DT[m3] <- predAcOnly_DT$se.fit
AcOnly_predictionSet$testObs_DT[m3] <- Test_AcOnly.set$Density[compAcSet_DT]
AcOnly_predictionSet$testObs_DT_smooth <- rollmean(AcOnly_predictionSet$testObs_DT,k=7,fill=NA)
AcOnly_predictionSet$DC <- NA
AcOnly_predictionSet$predSd_DC <- NA
AcOnly_predictionSet$testObs_DC <-NA
DC_times <- AcOnlyGoodTimes[compAcSet_DC]
m4 <- match(DC_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$DC[m4] <- predAcOnly_DC$fit
AcOnly_predictionSet$predSd_DC[m4] <- predAcOnly_DC$se.fit
AcOnly_predictionSet$testObs_DC[m4] <- Test_AcOnly.set$Density[compAcSet_DC]
AcOnly_predictionSet$testObs_DC_smooth <- rollmean(AcOnly_predictionSet$testObs_DC,k=7,fill=NA)
AcOnly_predictionSet$MP <- NA
AcOnly_predictionSet$predSd_MP <- NA
AcOnly_predictionSet$testObs_MP <-NA
MP_times <- AcOnlyGoodTimes[compAcSet_MP]
m5 <- match(MP_times,AcOnly_predictionSet$date)
AcOnly_predictionSet$MP[m5] <- predAcOnly_MP$fit
AcOnly_predictionSet$predSd_MP[m5] <- predAcOnly_MP$se.fit
AcOnly_predictionSet$testObs_MP[m5] <- Test_AcOnly.set$Density[compAcSet_MP]
AcOnly_predictionSet$testObs_MP_smooth <- rollmean(AcOnly_predictionSet$testObs_MP,k=7,fill=NA)
AcOnly_predictionSet$Legend1 <- "Observations"
AcOnly_predictionSet$StDev <- "Std. Error"
AcOnly_predictionSet$Legend <- "Predictions"
# par(mfrow = c(5,1),oma=c(3,0,5,0)),colour="#000099",colour="#CC0000"
mcLabel <- grobTree(textGrob("MC", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
gcLabel <- grobTree(textGrob("GC", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
dtLabel <- grobTree(textGrob("DT", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
dcLabel <- grobTree(textGrob("DC", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
mpLabel <- grobTree(textGrob("MP", x=0.01,  y=0.90, hjust=0,
gp=gpar(col="black", fontsize=13, fontface="bold")))
p1_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_MC + MC, ymin = pmax(MC - predSd_MC,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(MC - predSd_MC,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_MC_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y = MC, color = Legend))+
labs(y = "Density (/1000km^2)", x = "")+
scale_color_manual("",values= c("gray48","#009999"))+
theme_bw()+theme(legend.position = c(0.9, 0.8),legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))+
annotation_custom(mcLabel)#+ylim(c(0,.6))
p2_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_GC + GC, ymin = pmax(GC - predSd_GC,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(GC - predSd_GC,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_GC_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=GC, color = Legend))+
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(gcLabel)
p3_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_DT + DT, ymin = pmax(DT - predSd_DT,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(DT - predSd_DT,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_DT_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=DT, color = Legend)) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(dtLabel)
p4_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_DC + DC, ymin = pmax(DC - predSd_DC,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(DC - predSd_DC,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_DC_smooth, color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=DC, color = Legend)) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(dcLabel)
p5_Ac <- ggplot() +
geom_ribbon(data = AcOnly_predictionSet,
aes(x = date, ymax = predSd_MP + MP, ymin = pmax(MP - predSd_MP,0)), fill = "lightgray") +
geom_area(data = AcOnly_predictionSet,
aes(x = date, y = pmax(MP - predSd_MP,0)), fill = "white") +
geom_line(data = AcOnly_predictionSet,
aes(x = date, y = testObs_MP_smooth,color = Legend1))+
geom_line(data = AcOnly_predictionSet,
aes(x=date, y=MP, color = Legend)) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Density (/1000km^2)", x = "Date")+theme_bw()+
theme(legend.position="none")+annotation_custom(mpLabel)
multiplot(p1_Ac, p2_Ac, p3_Ac, p4_Ac, p5_Ac, cols=1)
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/knit_everything.R')
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/knit_everything.R')
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/knit_everything.R')
warnings()
