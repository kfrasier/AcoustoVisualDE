geom_ribbon(data = VisOnly_predictionSet,
aes(x = date, ymax = pmin(predSd_MC + MC,1), ymin = pmax(MC - predSd_MC,0)), fill = "lightgray") +
geom_area(data = VisOnly_predictionSet,
aes(x = date, y = pmax(MC - predSd_MC,0)), fill = "white") +
geom_line(data = VisOnly_predictionSet,
aes(x= date, y=MC, color = Legend)) +
geom_point(data = AcOnly_predictionSet,
aes(x = date, y = yTF_MC, color = Legend1),alpha = 0.5) +
labs(y = "Encounter probability", x = "")+
scale_color_manual("",values= c("gray48","#009999"))+
theme_bw()+theme(legend.position = c(0.9, 0.8),legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))+
annotation_custom(mcLabel)
p2_Vis <- ggplot() +
geom_ribbon(data = VisOnly_predictionSet,
aes(x = date, ymax = pmin(predSd_GC + GC,1), ymin = pmax(GC - predSd_GC,0)), fill = "lightgray") +
geom_area(data = VisOnly_predictionSet,
aes(x = date, y = pmax(GC - predSd_GC,0)), fill = "white") +
geom_line(data = VisOnly_predictionSet,
aes(x = date, y = GC, color = Legend)) +
geom_point(data = AcOnly_predictionSet,
aes(x = date, y = yTF_GC, color = Legend1),alpha = 0.5) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Encounter probability", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(gcLabel)
p3_Vis <- ggplot() +
geom_ribbon(data = VisOnly_predictionSet,
aes(x = date, ymax = pmin(predSd_DT + DT,1), ymin = pmax(DT - predSd_DT,0)), fill = "lightgray") +
geom_area(data = VisOnly_predictionSet,
aes(x = date, y = pmax(DT - predSd_DT,0)), fill = "white") +
geom_line(data = VisOnly_predictionSet,
aes(x = date, y = DT, color = Legend)) +
geom_point(data = AcOnly_predictionSet,
aes(x = date, y = yTF_DT, color = Legend1),alpha = 0.5) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Encounter probability", x = "Date")+theme_bw()+
theme(legend.position="none")+annotation_custom(dtLabel)
multiplot(p1_Vis, p2_Vis, p3_Vis, cols=1)
# Confusing, but acoustic only predictors are passed in to since we're predicting on the acoustic timeseries.
pred_MC <- predict(nn_Joint[[best_Joint_ModelIndex]],AcOnly_test_scaled[compAcSet_MC,model1.indices])
pred_GC <- predict(nn_Joint[[best_Joint_ModelIndex]],AcOnly_test_scaled[compAcSet_GC,model1.indices])
pred_DT <- predict(nn_Joint[[best_Joint_ModelIndex]],AcOnly_test_scaled[compAcSet_DT,model1.indices])
predVar_MC <- NULL
predVar_GC <- NULL
predVar_DT <- NULL
for (iMod in c(1:trainRepeats)){
predVar_MC[[iMod]] <- predict(nn_Joint[[best_Joint_ModelIndex]]$model[[iMod]],
AcOnly_test_scaled[compAcSet_MC,model1.indices])
predVar_GC[[iMod]] <- predict(nn_Joint[[best_Joint_ModelIndex]]$model[[iMod]],
AcOnly_test_scaled[compAcSet_GC,model1.indices])
predVar_DT[[iMod]] <- predict(nn_Joint[[best_Joint_ModelIndex]]$model[[iMod]],
AcOnly_test_scaled[compAcSet_DT,model1.indices])
}
n1MC <- length(predVar_MC[[1]])
predVar_MC_DF <- structure(predVar_MC, row.names = c(NA, -n1MC), class = "data.frame")
n1GC <- length(predVar_GC[[1]])
predVar_GC_DF <- structure(predVar_GC, row.names = c(NA, -n1GC), class = "data.frame")
n1DT <- length(predVar_DT[[1]])
predVar_DT_DF <- structure(predVar_DT, row.names = c(NA, -n1DT), class = "data.frame")
Joint_predictionSet <- data.frame(unique(Test_AcOnly.set$date))
colnames(Joint_predictionSet) <-"date"
Joint_predictionSet$MC <- NA
Joint_predictionSet$predSd_MC <- NA
m1 <- match(MC_times,Joint_predictionSet$date)
Joint_predictionSet$MC[m1] <-pred_MC
Joint_predictionSet$predSd_MC[m1] <- rowSds(data.matrix(predVar_MC_DF))
Joint_predictionSet$GC <- NA
Joint_predictionSet$predSd_GC <- NA
m2 <- match(GC_times,Joint_predictionSet$date)
Joint_predictionSet$GC[m2] <-pred_GC
Joint_predictionSet$predSd_GC[m2] <- rowSds(data.matrix(predVar_GC_DF))
Joint_predictionSet$DT <- NA
Joint_predictionSet$predSd_DT <- NA
m3 <- match(DT_times,Joint_predictionSet$date)
Joint_predictionSet$DT[m3] <-pred_DT
Joint_predictionSet$predSd_DT[m3] <- rowSds(data.matrix(predVar_DT_DF))
Joint_predictionSet$Legend <- "Predictions"
# par(mfrow = c(5,1),oma=c(3,0,5,0)),colour="#000099",colour="#CC0000"
p1 <- ggplot() +
geom_ribbon(data = Joint_predictionSet,
aes(x = date, ymax = pmin(predSd_MC + MC,1), ymin = pmax(MC - predSd_MC,0)), fill = "lightgray") +
geom_area(data = Joint_predictionSet,
aes(x = date, y = pmax(MC - predSd_MC,0)), fill = "white") +
geom_line(data = Joint_predictionSet,
aes(x= date, y=MC, color = Legend)) +
geom_point(data = AcOnly_predictionSet,
aes(x = date, y = yTF_MC, color = Legend1),alpha = 0.5) +
labs(y = "Encounter probability", x = "")+
scale_color_manual("",values= c("gray48","#009999"))+
theme_bw()+theme(legend.position = c(0.9, 0.8),legend.title=element_blank(),
legend.margin=margin(c(1,5,5,5)))+
annotation_custom(mcLabel)
p2 <- ggplot() +
geom_ribbon(data = Joint_predictionSet,
aes(x = date, ymax = pmin(predSd_GC + GC,1), ymin = pmax(GC - predSd_GC,0)), fill = "lightgray") +
geom_area(data = Joint_predictionSet,
aes(x = date, y = pmax(GC - predSd_GC,0)), fill = "white") +
geom_line(data = Joint_predictionSet,
aes(x = date, y = GC, color = Legend)) +
geom_point(data = AcOnly_predictionSet,
aes(x = date, y = yTF_GC, color = Legend1),alpha = 0.5) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Encounter probability", x = "")+theme_bw()+
theme(legend.position="none")+annotation_custom(gcLabel)
p3 <- ggplot() +
geom_ribbon(data = Joint_predictionSet,
aes(x = date, ymax = pmin(predSd_DT + DT,1), ymin = pmax(DT - predSd_DT,0)), fill = "lightgray") +
geom_area(data = Joint_predictionSet,
aes(x = date, y = pmax(DT - predSd_DT,0)), fill = "white") +
geom_line(data = Joint_predictionSet,
aes(x = date, y = DT, color = Legend)) +
geom_point(data = AcOnly_predictionSet,
aes(x = date, y = yTF_DT, color = Legend1),alpha = 0.5) +
scale_color_manual("",values= c("gray48","#009999"))+
labs(y = "Encounter probability", x = "Date")+theme_bw()+
theme(legend.position="none")+ annotation_custom(dtLabel)
multiplot(p1, p2, p3, cols = 1)
load('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/2009_prediction_rasters_scaled.Rdata')
### Acoustic Only spatial prediction
# dt1 <- as.data.frame(jan2009_rasters,xy=TRUE)
# set out of range values in rasters to NA
jan2009_rastersAc <- jan2009_rasters
july2009_rastersAc <- july2009_rasters
for (iR in model1.indices){
paste(iR)
thisVarName <- n[iR]
paste(thisVarName)
# problem here with scaled data - fix this by just calculating limits of unscaled data.
jan2009_rastersAc[[thisVarName]][jan2009_rastersAc[[thisVarName]]<
AcOnlyRangesMin[thisVarName]]<- NA
jan2009_rastersAc[[thisVarName]][jan2009_rastersAc[[thisVarName]]>
AcOnlyRangesMax[thisVarName]]<- NA
july2009_rastersAc[[thisVarName]][july2009_rastersAc[[thisVarName]]<
AcOnlyRangesMin[thisVarName]]<- NA
july2009_rastersAc[[thisVarName]][july2009_rastersAc[[thisVarName]]>
AcOnlyRangesMax[thisVarName]]<- NA
}
jan2009_AcOnly_prediction <- raster::predict(jan2009_rastersAc,
nn_AcOnly[[best_AcOnly_ModelIndex]],
na.action = na.pass)
# make prediction including out of range items using unpruned raster
jan2009_AcOnly_prediction_IncludingOutsideObs <- raster::predict(jan2009_rasters,
nn_AcOnly[[best_AcOnly_ModelIndex]],
na.action = na.pass)
july2009_AcOnly_prediction <- raster::predict(july2009_rastersAc,
nn_AcOnly[[best_AcOnly_ModelIndex]],
na.action = na.pass)
# make prediction including out of range items using unpruned raster
july2009_AcOnly_prediction_IncludingOutsideObs <- raster::predict(july2009_rasters,
nn_AcOnly[[best_AcOnly_ModelIndex]],
na.action = na.pass)
# jan2009_AcOnly_prediction_probSee <- jan2009_AcOnly_prediction*visG0*visDetProb
# july2009_AcOnly_prediction_probSee <- july2009_AcOnly_prediction*visG0*visDetProb
# compute for each iteration to generate variability index
perModel_jan2009_AcOnly <- vector('list',length = trainRepeats)
perModel_july2009_AcOnly <- vector('list',length = trainRepeats)
for (iMod in c(1:trainRepeats)){
perModel_jan2009_AcOnly[iMod] <- raster::predict(jan2009_rastersAc, nn_AcOnly[[best_AcOnly_ModelIndex]]$model[[iMod]],
na.action = na.pass)
perModel_july2009_AcOnly[iMod] <- raster::predict(july2009_rastersAc, nn_AcOnly[[best_AcOnly_ModelIndex]]$model[[iMod]],
na.action = na.pass)
}
### Visual Only spatial prediction
#dt1 <- as.data.frame(jan2009_rasters,xy=TRUE)
jan2009_rastersVis <- jan2009_rasters
july2009_rastersVis <- july2009_rasters
for (iR in model1.indices){
thisVarName <- n[iR]
jan2009_rastersVis[[thisVarName]][jan2009_rastersVis[[thisVarName]]<
VisOnlyRangesMin[thisVarName]]<- NA
jan2009_rastersVis[[thisVarName]][jan2009_rastersVis[[thisVarName]]>
VisOnlyRangesMax[thisVarName]]<- NA
july2009_rastersVis[[thisVarName]][july2009_rastersVis[[thisVarName]]<
VisOnlyRangesMin[thisVarName]]<- NA
july2009_rastersVis[[thisVarName]][july2009_rastersVis[[thisVarName]]>
VisOnlyRangesMax[thisVarName]]<- NA
}
jan2009_VisOnly_prediction <- raster::predict(jan2009_rastersVis,
nn_VisOnly[[best_VisOnly_ModelIndex]],na.action = na.pass)
# make prediction including out of range items using unpruned raster
jan2009_VisOnly_prediction_IncludingOutsideObs <- raster::predict(jan2009_rasters,
nn_VisOnly[[best_VisOnly_ModelIndex]],
na.action = na.pass)
july2009_VisOnly_prediction <- raster::predict(july2009_rastersVis,
nn_VisOnly[[best_VisOnly_ModelIndex]],na.action = na.pass)
# make prediction including out of range items using unpruned raster
july2009_VisOnly_prediction_IncludingOutsideObs <- raster::predict(july2009_rasters,
nn_VisOnly[[best_VisOnly_ModelIndex]],
na.action = na.pass)
#jan2009_VisOnly_prediction_probSee <- jan2009_VisOnly_prediction*visG0*visDetProb
#july2009_VisOnly_prediction_probSee <- july2009_VisOnly_prediction*visG0*visDetProb
perModel_jan2009_VisOnly <- vector('list',length = trainRepeats)
perModel_july2009_VisOnly <- vector('list',length = trainRepeats)
for (iMod in c(1:trainRepeats)){
perModel_jan2009_VisOnly[iMod] <- raster::predict(jan2009_rastersVis,
nn_VisOnly[[best_VisOnly_ModelIndex]]$model[[iMod]],
na.action = na.pass)
perModel_july2009_VisOnly[iMod] <- raster::predict(july2009_rastersVis,
nn_VisOnly[[best_VisOnly_ModelIndex]]$model[[iMod]],
na.action = na.pass)
}
### Joint Visual and Acoustic spatial prediction
jan2009_rastersJoint <- jan2009_rasters
july2009_rastersJoint <- july2009_rasters
for (iR in model1.indices){
thisVarName <- n[iR]
jan2009_rastersJoint[[thisVarName]][jan2009_rastersJoint[[thisVarName]]<
JointRangesMin[thisVarName]]<- NA
jan2009_rastersJoint[[thisVarName]][jan2009_rastersJoint[[thisVarName]]>
JointRangesMax[thisVarName]]<- NA
july2009_rastersJoint[[thisVarName]][july2009_rastersJoint[[thisVarName]]<
JointRangesMin[thisVarName]]<- NA
july2009_rastersJoint[[thisVarName]][july2009_rastersJoint[[thisVarName]]>
JointRangesMax[thisVarName]]<- NA
}
jan2009_prediction <- raster::predict(jan2009_rastersJoint,
nn_Joint[[best_Joint_ModelIndex]],na.action = na.pass)
july2009_prediction <- raster::predict(july2009_rastersJoint,
nn_Joint[[best_Joint_ModelIndex]],na.action = na.pass)
perModel_jan2009_Joint <- vector('list',length = trainRepeats)
perModel_july2009_Joint <- vector('list',length = trainRepeats)
for (iMod in c(1:trainRepeats)){
perModel_jan2009_Joint[iMod] <- raster::predict(jan2009_rastersJoint,
nn_Joint[[best_Joint_ModelIndex]]$model[[iMod]],
na.action = na.pass)
perModel_july2009_Joint[iMod] <- raster::predict(july2009_rastersJoint,
nn_Joint[[best_Joint_ModelIndex]]$model[[iMod]],
na.action = na.pass)
}
# Wrangle projections for mapping:
predTemplate <-raster('E:/NASData/Eddy/RefRaster.tif')
map_proj <- crs(predTemplate)
crop_limits <- readOGR('E:/NASData/AcoustoVisualDE/Prediction_template/prediction_polygon.shp',verbose=FALSE)
crop_limits_proj <- spTransform(crop_limits, CRSobj = map_proj)
# Acoustic
jan2009_AcOnly_prediction_crop <- mask(jan2009_AcOnly_prediction,crop_limits_proj)
july2009_AcOnly_prediction_crop <-
mask(july2009_AcOnly_prediction,crop_limits_proj)
jan2009_AcOnly_map_probSee <- jan2009_AcOnly_prediction_crop*visG0*visDetProb
july2009_AcOnly_map_probSee <- july2009_AcOnly_prediction_crop*visG0*visDetProb
perModel_jan2009_AcOnly_crop <- vector('list',length = trainRepeats)
perModel_july2009_AcOnly_crop <- vector('list',length = trainRepeats)
for (iMod in c(1:trainRepeats)){
perModel_jan2009_AcOnly_crop[[iMod]]  <- mask(perModel_jan2009_AcOnly[[iMod]],crop_limits_proj)
perModel_july2009_AcOnly_crop[[iMod]]  <- mask(perModel_july2009_AcOnly[[iMod]],crop_limits_proj)
}
predSTD_jan2009_AcOnly_crop <- calc(stack(perModel_jan2009_AcOnly_crop),fun=sd)/100
predSTD_july2009_AcOnly_crop <- calc(stack(perModel_july2009_AcOnly_crop),fun=sd)/100
# Visual
jan2009_VisOnly_prediction_crop <-
mask(jan2009_VisOnly_prediction,crop_limits_proj)
july2009_VisOnly_prediction_crop <- mask(july2009_VisOnly_prediction,crop_limits_proj)
jan2009_VisOnly_map_probSee <- jan2009_VisOnly_prediction_crop*visG0*visDetProb
july2009_VisOnly_map_probSee <- july2009_VisOnly_prediction_crop*visG0*visDetProb
perModel_jan2009_VisOnly_crop <- vector('list',length = trainRepeats)
perModel_july2009_VisOnly_crop <- vector('list',length = trainRepeats)
for (iMod in c(1:trainRepeats)){
perModel_jan2009_VisOnly_crop[[iMod]]  <- mask(perModel_jan2009_VisOnly[[iMod]], crop_limits_proj)
perModel_july2009_VisOnly_crop[[iMod]]  <- mask(perModel_july2009_VisOnly[[iMod]], crop_limits_proj)
}
predSTD_jan2009_VisOnly_crop <- calc(stack(perModel_jan2009_VisOnly_crop),fun=sd,na.rm=TRUE)/100
predSTD_july2009_VisOnly_crop <- calc(stack(perModel_july2009_VisOnly_crop),fun=sd,na.rm=TRUE)/100
# Joint
jan2009_prediction_crop <- mask(jan2009_prediction,crop_limits_proj)
july2009_prediction_crop <- mask(july2009_prediction,crop_limits_proj)
jan2009_map_probSee <- jan2009_prediction_crop*visG0*visDetProb
july2009_map_probSee <- july2009_prediction_crop*visG0*visDetProb
perModel_jan2009_Joint_crop <- vector('list',length = trainRepeats)
perModel_july2009_Joint_crop <- vector('list',length = trainRepeats)
for (iMod in c(1:trainRepeats)){
perModel_jan2009_Joint_crop[[iMod]]  <- mask(perModel_jan2009_Joint[[iMod]], crop_limits_proj)
perModel_july2009_Joint_crop[[iMod]]  <- mask(perModel_july2009_Joint[[iMod]], crop_limits_proj)
}
predSTD_jan2009_Joint_crop <- calc(stack(perModel_jan2009_Joint_crop),fun=sd,na.rm=TRUE)/100
predSTD_july2009_Joint_crop <- calc(stack(perModel_july2009_Joint_crop),fun=sd,na.rm=TRUE)/100
### Model averaging
# Alternatively, the visual and acoustic models could be averaged.
jan2009mean <- mean(jan2009_AcOnly_prediction_IncludingOutsideObs,
jan2009_VisOnly_prediction_IncludingOutsideObs,na.rm = TRUE)
july2009mean <- mean(july2009_AcOnly_prediction_IncludingOutsideObs,
july2009_VisOnly_prediction_IncludingOutsideObs,na.rm = TRUE)
jan2009mean_prediction_crop <- mask(jan2009mean,jan2009_prediction_crop)
july2009mean_prediction_crop <- mask(july2009mean,july2009_prediction_crop)
jan2009mean_prediction_probSee <- jan2009mean_prediction_crop*visG0*visDetProb
july2009mean_prediction_probSee <- july2009mean_prediction_crop*visG0*visDetProb
# Display summer (July 2009) map:
maxColorSummer <- ceiling(max(c(july2009_AcOnly_prediction_crop@data@max,
july2009_VisOnly_prediction_crop@data@max,
july2009_prediction_crop@data@max,
july2009mean_prediction_crop@data@max))*10)/10
# jan2009_AcOnly_prediction_crop@data@max,
# jan2009_VisOnly_prediction_crop@data@max,
# jan2009_prediction_crop@data@max,
# jan2009mean_prediction_crop@data@max))
palSummer <- colorNumeric(palette = matlab.like2(5),
domain=c(0,maxColorSummer),
na.color = 'transparent')
GU2009Effort <- readOGR('E:/NASData/GU2009Effort/GU_Effort_Merge_clip_Project.shp',verbose=FALSE)
GU2009EffortLines <- sp::spTransform(GU2009Effort, CRSobj = CRS('+init=epsg:4326'))
map <- leaflet(width="100%") %>%  setView(lng = -88.8, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addRasterImage(july2009_AcOnly_prediction_crop, colors = palSummer,
opacity = 0.8, group = 'Acoustic July 2009') %>%
addRasterImage(july2009_VisOnly_prediction_crop, colors = palSummer,
opacity = 0.8, group = 'Visual July 2009') %>%
addRasterImage(july2009_prediction_crop, colors = palSummer,
opacity = 0.8, group = 'Joint July 2009') %>%
addRasterImage(july2009mean_prediction_crop,colors = palSummer,
opacity = 0.8, group = 'Vis. & Ac. Mean July 2009') %>%
addPolylines(data = GU2009EffortLines,
group ='Visual Effort (Summer 2009)',
opacity = 1,
color = "black", weight = 2)%>%
addCircleMarkers(data = sightingsTest, lng = ~ long, lat = ~ lat,
color = "black",
stroke = TRUE, fillOpacity = 0.8,radius = 6,
group = 'Test Sightings (Summer 2009)') %>%
addMarkers(data = HARPsites, lng = ~ long, lat = ~ lat) %>%
addLegend(pal = palSummer, values = c(0,maxColorSummer),
title = 'P(encounter)',position = "bottomleft") %>%
addLayersControl(
baseGroups = c('Acoustic July 2009','Visual July 2009',
'Joint July 2009','Vis. & Ac. Mean July 2009'),
overlayGroups = c('Test Sightings (Summer 2009)',
'Visual Effort (Summer 2009)'),
options = layersControlOptions(collapsed = FALSE)
)
map
png(paste(outDir,SP,'_summer2009maps_NN.png',sep=''), width = 6, height = 7, units = 'in',res = 600)
# plot best summer map for publication
sightShape = SpatialPoints(sightingsTest[c(2,1)],proj4string =  crs(GU2009EffortLines))
harpShape = SpatialPoints(HARPsites[c(1,8,14),c(2,1)],proj4string =
crs(GU2009EffortLines))
crop_limits_Reproj = spTransform(crop_limits_proj,crs(GU2009EffortLines))
JointMapSummer = tm_shape(july2009mean_prediction_crop)+tm_raster(palette = matlab.like2(5),colorNA = NULL,style = "cont",midpoint = maxColorSummer/2,title = "P(Encounter)",legend.reverse = TRUE)+
tm_layout(legend.title.size = .9,legend.position = c(.8,.43))+
tm_shape(crop_limits_Reproj)+
tm_borders(lty = 1)+
tm_shape(GU2009EffortLines)+tm_lines()+
tm_shape(harpShape)+tm_symbols(col = "orange", border.col = "black",size = .5, alpha = 1,shape = 24)+
tm_shape(sightShape)+tm_symbols(col = "black", border.col = "white",shape=21,size = .4, alpha = .75)
AcMapSummer = tm_shape(july2009_AcOnly_prediction_crop)+tm_raster(palette = matlab.like2(5),colorNA = NULL,style = "cont",midpoint = maxColorSummer/2,title = "P(Encounter)",legend.reverse = TRUE)+
tm_layout(legend.title.size = .9,legend.position = c(.8,.50))+
tm_shape(crop_limits_Reproj)+tm_borders(lty = 1)+
tm_shape(GU2009EffortLines)+tm_lines()+
tm_shape(harpShape)+tm_symbols(col = "orange", border.col = "black",size = .5, alpha = 1,shape = 24)+
tm_shape(sightShape)+tm_symbols(col = "black", border.col = "white",shape=21,size = .4, alpha = .75)
VisMapSummer = tm_shape(july2009_VisOnly_prediction_crop)+tm_raster(palette = matlab.like2(5),colorNA = NULL,style = "cont",midpoint = maxColorSummer/2,title = "P(Encounter)",legend.reverse = TRUE)+
tm_layout(legend.title.size = .9,legend.position = c(.8,.50))+
tm_shape(crop_limits_Reproj)+tm_borders(lty = 1)+
tm_shape(GU2009EffortLines)+tm_lines()+
tm_shape(harpShape)+tm_symbols(col = "orange", border.col = "black",size = .5, alpha = 1,shape = 24)+
tm_shape(sightShape)+tm_symbols(col = "black", border.col = "white",shape=21,size = .4, alpha = .75)
tmap_arrange(AcMapSummer,VisMapSummer,JointMapSummer,ncol = 1, nrow = 3, outer.margins = 0.05)
dev.off()
maxColorUncert <- ceiling(max(c(predSTD_july2009_AcOnly_crop@data@max,
predSTD_july2009_VisOnly_crop@data@max,
predSTD_july2009_Joint_crop@data@max,
predSTD_jan2009_AcOnly_crop@data@max,
predSTD_jan2009_VisOnly_crop@data@max,
predSTD_jan2009_Joint_crop@data@max))*100)/100
palUncert <- colorNumeric(palette = matlab.like2(5),
domain=c(0,maxColorUncert),
na.color = 'transparent')
# Display summer (July 2009) map:
map <- leaflet(width="100%") %>%  setView(lng = -88.8, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addRasterImage(predSTD_july2009_AcOnly_crop, colors = palUncert,
opacity = 0.8, group = 'Acoustic July 2009') %>%
addRasterImage(predSTD_july2009_VisOnly_crop, colors = palUncert,
opacity = 0.8, group = 'Visual July 2009') %>%
addRasterImage(predSTD_july2009_Joint_crop, colors = palUncert,
opacity = 0.8, group = 'Joint July 2009') %>%
addLegend(pal = palUncert, values = c(0,maxColorUncert),
title = 'STD(P(encounter))',position = "bottomleft") %>%
addLayersControl(
baseGroups = c('Acoustic July 2009','Visual July 2009',
'Joint July 2009'),
options = layersControlOptions(collapsed = FALSE)
)
map
# Display winter (January 2009) map:
maxColorWinter <- ceiling(max(c(jan2009_AcOnly_prediction_crop@data@max,
jan2009_VisOnly_prediction_crop@data@max,
jan2009_prediction_crop@data@max,
jan2009mean_prediction_crop@data@max))*10)/10
palWinter <- colorNumeric(palette = matlab.like2(5),
domain=c(0,maxColorWinter),
na.color = 'transparent')
map <- leaflet(width="100%") %>%  setView(lng = -88.8, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addRasterImage(jan2009_AcOnly_prediction_crop, colors = palWinter,
opacity = 0.8, group = 'Acoustic Jan. 2009') %>%
addRasterImage(jan2009_VisOnly_prediction_crop, colors = palWinter,
opacity = 0.8, group = 'Visual Jan. 2009') %>%
addRasterImage(jan2009_prediction_crop, colors = palWinter,
opacity = 0.8, group = 'Joint Jan. 2009') %>%
addRasterImage(jan2009mean_prediction_crop,colors = palWinter,
opacity = 0.8, group = 'Vis. & Ac. Mean Jan. 2009') %>%
addMarkers(data = HARPsites, lng = ~ long, lat = ~ lat) %>%
addLegend(pal = palWinter, values = c(0,maxColorWinter),
title = 'P(encounter)',position = "bottomleft") %>%
addLayersControl(
baseGroups = c('Acoustic Jan. 2009','Visual Jan. 2009',
'Joint Jan. 2009','Vis. & Ac. Mean Jan. 2009'),
options = layersControlOptions(collapsed = FALSE)
)
map
# Display summer (July 2009) map:
map <- leaflet(width="100%") %>%  setView(lng = -88.8, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addRasterImage(predSTD_jan2009_AcOnly_crop, colors = palUncert,
opacity = 0.8, group = 'Acoustic Jan. 2009') %>%
addRasterImage(predSTD_jan2009_VisOnly_crop, colors = palUncert,
opacity = 0.8, group = 'Visual Jan. 2009') %>%
addRasterImage(predSTD_jan2009_Joint_crop, colors = palUncert,
opacity = 0.8, group = 'Joint Jan. 2009') %>%
addLegend(pal = palUncert, values = c(0,maxColorUncert),
title = 'STD(P(encounter))',position = "bottomleft") %>%
addLayersControl(
baseGroups = c('Acoustic Jan. 2009','Visual Jan. 2009',
'Joint Jan. 2009'),
options = layersControlOptions(collapsed = FALSE)
)
map
nModels = length(layerSizeList)
july2009_prediction_hidden <- vector('list',length = nModels)
for (iP in c(1:nModels)){
july2009_prediction_hidden[[iP]] <- mask(raster::predict(july2009_rastersJoint,
nn_Joint[[iP]],na.action = na.pass),crop_limits_proj)
}
maxVal = maxValue(july2009_prediction_hidden[[nModels]])
palSummer2 <- colorNumeric(palette = matlab.like2(5),
domain=c(0,maxVal),
na.color = 'transparent')
# Display winter (January 2009) map:
map <- leaflet(width="100%") %>%  setView(lng = -88.8, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addRasterImage(july2009_prediction_hidden[[1]], colors = palSummer2,
opacity = 0.8, group = '4 nodes') %>%
addRasterImage(july2009_prediction_hidden[[2]], colors = palSummer2,
opacity = 0.8, group = '6 nodes') %>%
addRasterImage(july2009_prediction_hidden[[3]], colors = palSummer2,
opacity = 0.8, group = '8 nodes') %>%
addRasterImage(july2009_prediction_hidden[[4]], colors = palSummer2,
opacity = 0.8, group = '10 nodes') %>%
addRasterImage(july2009_prediction_hidden[[5]], colors = palSummer2,
opacity = 0.8, group = '12 nodes') %>%
addRasterImage(july2009_prediction_hidden[[6]], colors = palSummer2,
opacity = 0.8, group = '14 nodes') %>%
addLegend(pal = palSummer2, values = c(0,maxVal),
title = 'P(encounter)',position = "bottomleft") %>%
addLayersControl(
baseGroups = c('4 nodes','6 nodes','8 nodes',
'10 nodes','12 nodes','14 nodes'),
options = layersControlOptions(collapsed = FALSE)
)
map
# to recalculate the climatology raster stack:
# source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/scaled_climate_raster_stack.R', echo=TRUE)
# scaled_climate_raster_stack(covars_Joint_max.train,covars_Joint_min.train)
load('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/climatology_rasters_scaled.Rdata')
monthNum <-c('01','02','03','04','05','06','07','08','09','10','11','12')
monthStr<-c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
climatePrediction <- vector('list',length = 12)
mapClimatePrediction <- vector('list',length = 12)
for (iM in 1:length(monthStr)){
climatePrediction[[iM]] <- raster::predict(raster_set[[iM]],nn_Joint[[best_Joint_ModelIndex]],
na.action = na.pass)
mapClimatePrediction[[iM]] <- mask(climatePrediction[[iM]], crop_limits_proj)
# output raster to geotiff
rasterImageFileName = paste0(savePath,'/climatology_predictions/', SP,'_',monthStr[iM],'NN_mean_encounter_probability.tif')
writeRaster(mapClimatePrediction[[iM]],filename = rasterImageFileName, format="GTiff",overwrite = TRUE)
# #ouput raster to kml
# kmlImageFileName = paste0(savePath,'/climatology_predictions/', SP,'_',monthStr[iM],'NN_mean_encounter_probability.kml')
# KML(mapClimatePrediction[[iM]],file = kmlImageFileName, col=matlab.like2(32),overwrite = TRUE)
}
maxColor <- ceiling(max(c(mapClimatePrediction[[1]]@data@max,
mapClimatePrediction[[3]]@data@max,
mapClimatePrediction[[5]]@data@max,
mapClimatePrediction[[7]]@data@max,
mapClimatePrediction[[9]]@data@max,
mapClimatePrediction[[11]]@data@max))*10)/10
pal <- colorNumeric(palette = matlab.like2(5),
domain=c(0,maxColor),
na.color = 'transparent')
map <- leaflet(width="100%") %>%  setView(lng = -88.8, lat = 27.0, zoom = 6)%>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addRasterImage(mapClimatePrediction[[1]] , colors = pal,
opacity = 0.8, group = 'Jan.') %>%
addRasterImage(mapClimatePrediction[[3]] , colors = pal,
opacity = 0.8, group = 'March') %>%
addRasterImage(mapClimatePrediction[[5]] , colors = pal,
opacity = 0.8, group = 'May') %>%
addRasterImage(mapClimatePrediction[[7]] , colors = pal,
opacity = 0.8, group = 'July') %>%
addRasterImage(mapClimatePrediction[[9]] ,colors = pal,
opacity = 0.8, group = 'Sept.') %>%
addRasterImage(mapClimatePrediction[[11]] ,colors = pal,
opacity = 0.8, group = 'Nov.') %>%
addMarkers(data = HARPsites, lng = ~ long, lat = ~ lat,
group = "HARP Locations") %>%
addLegend(pal = pal, values = c(0,maxColor),
title = 'P(encounter)',position = "bottomleft") %>%
addLayersControl(
baseGroups = c('Jan.','March','May',
'July','Sept.','Nov.'),
overlayGroups = c('HARP Locations'),
options = layersControlOptions(collapsed = FALSE)
)
map
source('E:/NASData/AcoustoVisualDE/AcoustoVisualDE/knit_everything.R')
