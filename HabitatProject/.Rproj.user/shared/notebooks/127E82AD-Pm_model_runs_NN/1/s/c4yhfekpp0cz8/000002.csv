"0","## VISUAL ONLY"
"0","modelCounter <- 0"
"0","# put together the formula"
"0","f.VisOnly_NN1 <- as.formula(paste(""yVisOnly_TF ~"", paste(n[model1.indices], collapse = "" + "")))"
"0","f.Joint_NN1 <- as.formula(paste(""y_TF ~"", paste(n[model1.indices], collapse = "" + "")))"
"0","for (layerSize in layerSizeList){"
"0","  modelCounter <- modelCounter + 1  "
"0","  # train network"
"0","  nn_VisOnly[[modelCounter]] <- avNNet(f.VisOnly_NN1, VisOnly_train_scaled,"
"0","                                       weights = VisOnly_train_scaled$weightsG0,  "
"0","                                       size = layerSize, "
"0","                                       repeats = trainRepeats,"
"0","                                       na.action = na.omit,"
"0","                                       rang = 0.7,  "
"0","                                       decay = 0.0001, "
"0","                                       maxit = 500,"
"0","                                       trace = FALSE)"
"0","                                       # weights = "
"0","  "
"0","  # predict on train data and estimate MSE"
"0","  pr$nn_VisOnly_train[[modelCounter]] <- predict(nn_VisOnly[[modelCounter]],"
"0","                                                VisOnly_train_scaled[,model1.indices],"
"0","                                                na.action = na.omit)"
"0","  MSE$nn_VisOnly_train[[modelCounter]] <- mean(VisOnly_train_scaled$weightsG0*"
"0","                                        abs(VisOnly_train_scaled$yVisOnly_TF - "
"0","                                        pr$nn_VisOnly_train[[modelCounter]]),"
"0","                                        na.rm = TRUE)"
"0","  "
"0","  # predict on test data and estimate MSE"
"0","  pr$nn_VisOnly_test[[modelCounter]] <- predict(nn_VisOnly[[modelCounter]],"
"0","                                                VisOnly_test_scaled[,model1.indices],"
"0","                                                na.action = na.omit)"
"0","  MSE$nn_VisOnly_test[[modelCounter]] <- mean(VisOnly_test_scaled$weightsG0*"
"0","                                        abs(VisOnly_test_scaled$yVisOnly_TF - "
"0","                                        pr$nn_VisOnly_test[[modelCounter]]),"
"0","                                        na.rm = TRUE)"
"0","  "
"0","  ## how well does the model predict joint test data?"
"0","  pr$nn_VisOnly_test_JointData[[modelCounter]] <- predict(nn_VisOnly[[modelCounter]],"
"0","                                                Joint_test_scaled[,model1.indices],"
"0","                                                na.action = na.omit)"
"0",""
"0","  MSE$nn_VisOnly_test_JointData[[modelCounter]] <- mean(Joint_test_scaled$weightsG0*"
"0","                                        abs(Joint_test_scaled$y_TF - "
"0","                                        pr$nn_VisOnly_test_JointData[[modelCounter]]),"
"0","                                        na.rm = TRUE)"
"0","  "
"0","  ## JOINT"
"0","  nn_Joint[[modelCounter]]  <- avNNet(f.Joint_NN1, Joint_train_scaled,"
"0","                                      weights = Joint_train_scaled$weightsG0,"
"0","                                      size = layerSize, "
"0","                                      repeats = trainRepeats, "
"0","                                      na.action = na.omit,"
"0","                                      rang = 0.7,  "
"0","                                      decay = 0.0001, "
"0","                                      maxit = 500,"
"0","                                      trace = FALSE)                                     "
"0",""
"0","  "
"0","  pr$nn_Joint_train[[modelCounter]]  <- predict(nn_Joint[[modelCounter]],"
"0","                                         Joint_train_scaled[,model1.indices],"
"0","                                         na.action=na.omit)"
"0","  MSE$nn_Joint_train[[modelCounter]]  <- mean(Joint_train_scaled$weightsG0*"
"0","                                         abs(Joint_train_scaled$y_TF - "
"0","                                         pr$nn_Joint_train[[modelCounter]]),"
"0","                                         na.rm = TRUE)"
"0","  "
"0","  pr$nn_Joint_test[[modelCounter]]  <- predict(nn_Joint[[modelCounter]],"
"0","                                        Joint_test_scaled[,model1.indices],"
"0","                                        na.action=na.omit)"
"0","  MSE$nn_Joint_test[[modelCounter]]  <- mean(Joint_test_scaled$weightsG0*"
"0","                                        abs(Joint_test_scaled$y_TF - "
"0","                                        pr$nn_Joint_test[[modelCounter]]),"
"0","                                        na.rm = TRUE)"
"0","  "
"0","  cat(paste(""Done with VisOnly and Joint model iteration "","
"0","            modelCounter, "" of "", length(layerSizeList),"
"0","            "": Layer Size = "", layerSize, ""\n""))"
"0","}"
"1","Done with VisOnly and Joint model iteration  1  of  6 : Layer Size =  4 
"
"1","Done with VisOnly and Joint model iteration  2  of  6 : Layer Size =  6 
"
"1","Done with VisOnly and Joint model iteration  3  of  6 : Layer Size =  8 
"
"1","Done with VisOnly and Joint model iteration  4  of  6 : Layer Size =  10 
"
"1","Done with VisOnly and Joint model iteration  5  of  6 : Layer Size =  12 
"
"1","Done with VisOnly and Joint model iteration  6  of  6 : Layer Size =  14 
"
